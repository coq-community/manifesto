---
fullname: Lemma Overloading
shortname: lemma-overloading
organization: coq-community
community: true

synopsis: >-
  Libraries demonstrating design patterns for programming and proving
  with canonical structures in Coq

description: |
  This project contains Hoare Type Theory libraries which
  demonstrate a series of design patterns for programming
  with canonical structures that enable one to carefully
  and predictably coax Coq's type inference engine into triggering
  the execution of user-supplied algorithms during unification, and
  illustrates these patterns through several realistic examples drawn
  from Hoare Type Theory. The project also contains typeclass-based
  re-implementations for comparison.

paper:
  doi: 10.1017/S0956796813000051
  url: https://software.imdea.org/~aleks/papers/lessadhoc/journal.pdf
  title: How to make ad hoc proof automation less ad hoc

authors:
- name: Georges Gonthier
  initial: true
- name: Beta Ziliani
  initial: true
- name: Aleksandar Nanevski
  initial: true
- name: Derek Dreyer
  initial: true

maintainers:
- name: Anton Trunov
  nickname: anton-trunov
- name: Karl Palmskog
  nickname: palmskog

opam-file-maintainer: palmskog@gmail.com

license:
  fullname: GNU General Public License v3.0 or later
  identifier: GPL-3.0-or-later
  file: LICENSE.md

supported_coq_versions:
  text: 8.8 or later (use releases for other Coq versions)
  opam: '{(>= "8.8" & < "8.11~") | (= "dev")}'

tested_coq_nix_versions:
- version_or_url: https://github.com/coq/coq-on-cachix/tarball/master
- version_or_url: https://github.com/coq/coq-on-cachix/tarball/v8.10
- version_or_url: 8.9
- version_or_url: 8.8

tested_coq_opam_versions:
- version: dev

dependencies:
- opam:
    name: coq-mathcomp-ssreflect
    version: '{(>= "1.7.0" & < "1.9~") | (= "dev")}'
  nix: ssreflect
  description: |
    [MathComp](https://math-comp.github.io/math-comp/) 1.7.0 or later (`ssreflect` suffices)

namespace: LemmaOverloading

keywords:
- name: canonical structures
- name: proof automation
- name: hoare type theory
- name: lemma overloading

categories:
- name: Computer Science/Data Types and Data Structures

documentation: |
  ## Files described in the paper
  
  ### `indom.v`
  
  This file contains the indomR lemma from Section 3 "A simple overloaded lemma"
  
  ### `terms.v`, `xfind.v`, `cancel.v`, `cancelD.v`, `cancel2.v`
  
  These files prove the `cancelR` lemma from Section 4 "Reflection: Turning
  semantics into syntax". The first one contains the abstract syntax for heaps
  along with the lemma `cancel_sound`. `xfind.v` has the xfind structure
  to find an element in a list, return its index, and extend the list if the
  element is not found. The file `cancel.v` has the main overloaded lemma `cancelR`.
  Finally, `cancelD.v` contains the `simplify` lemma from section 4.3 and `cancel2.v`
  contains an alternative version of the cancellation function without using
  reflection.
   
  ### `stlogR.v`
  
  File containing a whole bunch of overloaded lemmas to automate the verification
  of imperative programs using Hoare Type Theory. The main technicalities in this
  file are covered in Section 5 "Solving for functional instances".
  
  ### `noalias.v`
  
  File containing all the automated lemmas described in Section 6 "Flexible
  composition and application of overloaded lemmas".
  
  
  ## Bonus track
  
  The files below didn't make it to the paper but deserve attention.
  
  ### `auto.v`
  
  This file contains an adapted example from VeriML (Stampoulist and Shao),
  to automatically prove propositions in a logic with binders.
  
  ### `llistR.v`
  
  Verification of a linked list datatype using the "step" overloaded lemma described in Section 5.2.
  
  ### `noaliasBT.v`
  
  There are several ways to attack a problem.
  Some of them lead to interesting but yet not entirely satisfactory results.
  Here are two versions of the `noalias` overloaded lemma with a different look.
  
  ### `indomCTC.v`, `xfindCTC.v`, `cancelCTC.v`, `noaliasCTC.v`, `stlogCTC.v` 
  
  These files contains the same automated lemmas as in the files `indom`, `cancel`,
  `noalias` and `stlogR`, but done with Coq Type Classes. 
  
  ## Note
  
  The files not mentioned here are part of the HTT library,
  from [Structuring the Verification of Heap-Manipulating Programs][reflect]
  by A. Nanevski et al., POPL'10.

  [reflect]: https://software.imdea.org/~aleks/papers/reflect/reflect.pdf
---
